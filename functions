#!/usr/bin/env bash

### openspace synthia bootstrap framework v0.2.1 [https://github.com/openspace42/synthia]

os_dna_version=0.2.6

################################################################################

define_vars() {

	############################################################################
	######################## Insert your variables here ########################
	############################################################################

	proj_name="incognitum"
	short_name="incognitum"
	author_name="openspace42"
	git_host="https://github.com/"

	### Set this to `y` if your project stores no data on end users' machines that could go lost during a re-install or update
	skip_install_time_backup=y

	### Set this to the directory that has the most impactful size when performing a backup [such as `/var/www/` for nginx-related projects]
	backup_ref_dir="/home/mastodon/live/public"

	############################################################################
	############################################################################
	############################################################################

	os-define_vars

}

################################################################################

check_root() {

	if [[ $EUID -ne 0 ]]
	then
		echo "This script must be run as root."
		echo
		echo "Exiting..."
		echo
		exit 1
	fi

}

download_os_dna() {

	clone_host="https://github.com"
	clone_author="openspace42"
	clone_name="dna"

	clone_base_dir=/root/$clone_author
	clone_dir=$clone_base_dir/$clone_name

	mkdir -p $clone_base_dir

	if [ -d $clone_dir ]
	then
		rm -r ${clone_dir:?}
	fi

	( cd "$clone_base_dir" && git clone "$clone_host/$clone_author/$clone_name" && cd "$clone_name" && \
		if [ ! "${custom_dna_version-null}" = "b" ]; \
		then \
			git checkout "tags/v$os_dna_version" && \
			echo "$os_dna_version" > "./version_installed"; \
		else \
			clone_latest_commit="$(git log -n 1 --pretty=format:"%H"  | cut -c1-7)" && \
			echo "bleeding-edge-$clone_latest_commit" > "./version_installed"; \
		fi &> /dev/null \
	)

}

source_os_dna() {

	for f in /root/openspace42/dna/functions/*
	do
		. $f
	done

}

################################################################################

################################################################################
######################## Insert project functions here #########################
################################################################################

backup_locally_loop() {

	## Backup important data from a Mastodon instance
	## Copyright (C) 2017 Gergely Nagy
	##
	## Released under the WTFPL, see LICENSE.

	### Backup configuration

	cp -r "${conf_dir}" "${tmp_backup_dir}/conf/"

	if [ "${mastodon_install_type}" = "docker" ]
	then

		cd "${mastodon_install_dir}"

		BACKUPDIR="${BACKUPDIR:-$(pwd)/backup}"
		MASTODON_DIR="${MASTODON_DIR:-./public}"
		DESTDIR="${BACKUPDIR}"
		install -d "${DESTDIR}"

		list_local_media() {
		    LMTMP=$(tempfile)
		    docker exec -t "${mastodon_db_container}" psql -U postgres -q -P pager=off -c \
		           'select ma.id, ma.file_file_name from media_attachments ma, accounts a where a.id = ma.account_id and a.domain is NULL;' \
		        | head -n -2 | tail -n +3 > ${LMTMP}

		    IFS="
		"
		    for line in $(cat ${LMTMP}); do
		        id=$(echo $line | cut -d "|" -f 1 | tr -d " ")
		        fn=$(echo $line | cut -d "|" -f 2 | tr -d " " | sed -e "s,\r,,")
		        url="system/media_attachments/files/$(printf "%09d" $id | sed -e 's,\(...\),\1/,g')original/$fn"
		        echo $url
		    done
		    rm -f "${LMTMP}"
		}

		echo "* Copying configuration..."
		cp ${MASTODON_DIR}/../.env.production ${MASTODON_DIR}/../docker-compose.yml ${DESTDIR}/

		echo "* Archiving local media..."
		cd "${MASTODON_DIR}"
		tar -cv --ignore-failed-read -f "${DESTDIR}/local-media.tar" $(list_local_media) 2>/dev/null

		echo "* Dumping the database..."
		docker exec -t "${mastodon_db_container}" pg_dumpall -c -U postgres | xz >"${DESTDIR}/db.sql.xz"

		mv ./backup "${tmp_backup_dir}/data/"

	else

		dna-echo -e "Non-docker functionality isn't implemented yet."
		dna-echo -m "If you'd like, please open a request on Github. Thanks!"
		dna-exit

	fi

}

################################################################################

restore_loop() {

	dna-echo -e "Restore functionality isn't implemented yet."
	dna-echo -m "If you'd like, please open a request on Github. Thanks!"
	dna-exit

	############################################################################

	### Following lines are left for reference only from raptor

	############################################################################

	rsync -aAXx --delete $restore_file_path/conf/ $conf_dir/

	### Perform raptor specific restore on this running machine

	echo "${b}Now restoring your old EasyEngine installation from backup...${x}"
	echo

	### Add hardcoded sites to exclude to the user-specified ones

	restore_exclude_sites="22222, html, roundcubemail, ${exclude_sites-null}"

	for site in $restore_file_path/data/*
	do

		if [ -d "$site" ]
		then

			this_site="$(echo "$site" | sed "s|${restore_file_path}/data/||")"

			if [ "${restore_exclude_sites/$this_site}" = "$restore_exclude_sites" ]
			then

				echo "${b}*] Now evaluating site | ${g}$this_site${x}${b} |: ${x}"
				echo
				www_site_dir="$www_dir/$this_site"

				proceed=y

				if [ -d $www_site_dir ]
				then

					echo "${r}${b}   This site already exists on this machine.${x}"
					echo

					if [ "${delete_existing:-null}" = "y" ]
					then
						echo "${b}   Deleting site and re-creating it restoring its respective backup...${x}"
						echo
						ee site delete $this_site --no-prompt
					else

						read -rp "${b}   Delete it and re-create it restoring its respective backup? (Y/n): ${x}" -n 1
						echo
						if [[ ! $REPLY =~ ^[Nn]$ ]]
						then
							echo "${b}   Ok, proceeding...${x}"
							echo
							ee site delete $this_site --no-prompt
						else
							echo
							echo "${b}   Ok, skipping...${x}"
							echo
							proceed=n
						fi

					fi
				fi

				if [ $proceed = y ]
				then

					ee site create $this_site
					echo

					### Test to see if site to be restored is a wordpress site and if it is restore it while replacing new database details

					real_wp_config_file="$site/wp-config.php"
					if [ -f $real_wp_config_file ]
					then

						echo "${b}   Proceeding with ${l}wordpress${x}${b} site restore...${x}"
						echo

						ee site update $this_site --wpfc
						echo

						www_wp_config_file="$www_site_dir/wp-config.php"

						www_WPDBNAME=`cat $www_wp_config_file | grep DB_NAME | cut -d \' -f 4`
						www_WPDBUSER=`cat $www_wp_config_file | grep DB_USER | cut -d \' -f 4`
						www_WPDBPASS=`cat $www_wp_config_file | grep DB_PASSWORD | cut -d \' -f 4`

						old_WPDBNAME=`cat $real_wp_config_file | grep DB_NAME | cut -d \' -f 4`
						old_WPDBUSER=`cat $real_wp_config_file | grep DB_USER | cut -d \' -f 4`
						old_WPDBPASS=`cat $real_wp_config_file | grep DB_PASSWORD | cut -d \' -f 4`

						rm "$www_wp_config_file"
						cp "$real_wp_config_file" "$www_wp_config_file"

						sed -i "s|${old_WPDBNAME}|${www_WPDBNAME}|g" "$www_wp_config_file"
						sed -i "s|${old_WPDBUSER}|${www_WPDBUSER}|g" "$www_wp_config_file"
						sed -i "s|${old_WPDBPASS}|${www_WPDBPASS}|g" "$www_wp_config_file"

						mysql -u"$www_WPDBUSER" -p"${www_WPDBPASS}" "${www_WPDBNAME}" < "$site/mysqldump.sql"

					else

						echo "${b}   Proceeding with ${m}NON wordpress${x}${b} site restore...${x}"
						echo

						if [ "${enable_php:-null}" = "y" ]
						then

							echo "${b}   Activating PHP on this site...${x}"
							echo
							ee site update $this_site --php
							echo

						elif [ "${enable_php:-null}" = "n" ]
						then
							echo "${b}   NOT activating PHP on this site...${x}"
							echo

						else

							read -rp "${b}   Activate PHP on restored site? (Y/n): ${x}" -n 1
							echo
							if [[ ! $REPLY =~ ^[Nn]$ ]]
							then
								echo "${b}   Ok, proceeding...${x}"
								echo
								ee site update $this_site --php
								echo
								echo
							else
								echo
								echo "${b}   Ok, skipping...${x}"
								echo
							fi

						fi

					fi

					rsync -aAXx --exclude wp-config.php --exclude mysqldump.sql "$site"/ "$www_site_dir"

					chown -R www-data:www-data "$www_site_dir"

					if [ "${enable_le:-null}" = "y" ]
					then
						echo "${b}   Provisioning LetsEncrypt TLS certificate for restored site...${x}"
						echo
						activate_le_proceed=y
					elif [ "${enable_le:-null}" = "o" ]
					then
						echo "${b}   Provisioning LetsEncrypt TLS certificate for restored site if DNS checks succeed...${x}"
						echo
						activate_le_proceed=o
					elif [ "${enable_le:-null}" = "n" ]
					then
						echo "${b}   NOT provisioning LetsEncrypt TLS certificate for restored site...${x}"
						echo
					else
						read -rp "${b}   Also provision LetsEncrypt TLS certificate for restored site? (Y/n): ${x}" -n 1
						echo
						if [[ ! $REPLY =~ ^[Nn]$ ]]
						then
							echo "${b}   Ok, proceeding...${x}"
							echo
							activate_le_proceed=y
						else
							echo
							echo "${b}   Ok, skipping...${x}"
							echo
						fi
					fi

					if [ "${activate_le_proceed:-null}" = "y" ] || [ "${activate_le_proceed:-null}" = "o" ]
					then

						hostname="$this_site"

						declare -a dnsarray=(
						"hostname"
						)

						# Skip IPv6 checks as EasyEngine doesn't yet support it [WTF!!!]

						declare -a iparray=(
						"v4"
						)

						declare -A digarray=(
						[HN]=""
						[www]="www."
						)

						dnschecktype=$hostname
						thisipv4="$(dig +short myip.opendns.com @resolver1.opendns.com)"

						for dnstype in "${dnsarray[@]}"
						do

							for ipversion in "${iparray[@]}"
							do

								echo "${b}   Now let's make sure your site's IP$ipversion DNS settings are correct.${x}"
								echo

								digarrayiter=0

								for i in "${!digarray[@]}"
								do

									digarrayiter=$((digarrayiter + 1))

									echo "${b}   $digarrayiter] Now checking the ${digarray[$i]}$dnschecktype DNS record in IP$ipversion...${x}"
									echo

									accept=n
									until [ $accept = "y" ]
									do

										if [ "$ipversion" = "v4" ]
										then
											thisip=$thisipv4
											digresult="$(getent ahostsv4 "${digarray[$i]}""$dnschecktype". | head -1 |sed 's/ .*//')"
											rectype="A"
										else
											thisip=$thisipv6
											digresult="$(getent ahostsv6 "${digarray[$i]}""$dnschecktype". | grep -v "$thisipv4" | head -1 | sed 's/ .*//')"
											rectype="AAAA"
										fi

										if [ -z "$digresult" ]
										then

											if [ ! "$dnstype" = "SRV" ]
											then
												echo "${r}${b}   The ${digarray[$i]}$dnschecktype IP$ipversion DNS record does NOT appear to be at all set.${x}"
												echo
											else
												echo "${r}${b}   The ${digarray[$i]}$dnschecktype SRV record does NOT appear to be at all set.${x}"
												echo
											fi

											echo "${b}   Please ensure you set your DNS record as follows:${x}"
											echo
											echo -e "   | ${digarray[$i]}$dnschecktype\\t\\t$rectype\\t$thisip |"
											echo
											if [ ! "${digarray[$i]}$dnschecktype" = "$hostname" ]
											then
												if [ $rectype = "A" ] || [ $rectype = "AAAA" ]
												then
													if [ "$ipversion" = "v4" ]
													then
														echo "${g}${b}   You can also set this record as a CNAME [suggested choice]:${x}"
														echo
														echo -e "   | ${digarray[$i]}$dnschecktype\\t\\tCNAME\\t$hostname |"
														echo
													fi
												fi
											fi
											result=notset
										else
											if [ "$digresult" = "$thisip" ]
											then

												if [ ! "$dnstype" = "SRV" ]
												then
													echo "${g}${b}   The ${digarray[$i]}$dnschecktype IP$ipversion DNS record appears to resolve correctly to this server.${x}"
													echo
												else
													echo "${g}${b}   The ${digarray[$i]}$dnschecktype SRV record appears to resolve correctly to this server.${x}"
													echo
												fi

												echo -e "   | ${digarray[$i]}$dnschecktype\\t\\t$rectype\\t$thisip |"
												echo
												result=ok
											else

												if [ ! "$dnstype" = "SRV" ]
												then
													echo "${r}${b}   The ${digarray[$i]}$dnschecktype IP$ipversion DNS record does NOT appear to correctly resolve to this server.${x}"
													echo
												else
													echo "${r}${b}   The ${digarray[$i]}$dnschecktype SRV record does NOT appear to correctly resolve to this server.${x}"
													echo
												fi

												echo "${b}   This is the result of a DNS query for ${digarray[$i]}$dnschecktype:${x}"
												echo
												echo "   $digresult"
												echo
												echo "${b}   Please set it instead to:${x}"
												echo
												echo -e "   | ${digarray[$i]}$dnschecktype\\t\\t$rectype\\t$thisip |"
												echo
												if [ ! "${digarray[$i]}$dnschecktype" = "$hostname" ]
												then
													if [ $rectype = "A" ] || [ $rectype = "AAAA" ]
													then
														if [ "$ipversion" = "v4" ]
														then
															echo "${g}${b}   You can also set this record as a CNAME [suggested choice]:${x}"
															echo
															echo -e "   | ${digarray[$i]}$dnschecktype\\t\\tCNAME\\t$hostname |"
															echo
														fi
													fi
												fi
												result=incorrect
											fi
										fi

										if [ ! $result = "ok" ]
										then

											if [ "${activate_le_proceed:-null}" = "y" ]
											then

												valid=n
												until [ $valid = "y" ]
												do
													read -n 1 -rp "${b}   Test again?${x} (${b}Y${x}[es]/${b}s${x}[kip]/${b}e${x}[xit]) " answer;
													case $answer in
														"")
														echo
														valid=y
														accept=n
														;;
														y)
														echo -e "\\n"
														valid=y
														accept=n
														;;
														s)
														echo -e "\\n"
														echo "${b}   Skipping DNS check for this record...${x}"
														echo
														valid=y
														accept=y
														;;
														e)
														echo -e "\\n"
														echo "${b}   Exiting...${x}"
														echo
														exit
														;;
														*)
														echo -e "\\n"
														echo "${b}   Invalid option. Retry...${x}"
														echo
														valid=n
														accept=n
														;;
													esac
												done

											else

												echo "${r}${b}   DNS test failed for this record. Continuing anyway...${x}"
												echo
												accept=y

											fi

										else

											accept=y

										fi

									done

									if [ $result = ok ]
									then

										if [ $i = "HN" ]
										then
											le_dns_check_HN=ok
										else
											le_dns_check_www=ok
										fi

									fi

								done

								echo "${b}   Finished checking your $dnstype IP$ipversion DNS settings.${x}"
								echo

							done

						done

						if [ "${le_dns_check_HN:-null}" = "ok" ] && [ "${le_dns_check_www:-null}" = "ok" ]
						then
							echo "${g}${b}   Activating LetsEncrypt for $this_site...${x}"
							echo
							ee site update $this_site --le --experimental || true
							echo
						else
							echo "${r}${b}   One or more DNS checks for $this_site failed and was skipped.${x}"
							echo
							echo "${b}   NOT activating LetsEncrypt for $this_site."
							echo
						fi

						if [ ! -z "${le_dns_check_HN-}" ]
						then
							unset le_dns_check_HN
						fi

						if [ ! -z "${le_dns_check_www-}" ]
						then
							unset le_dns_check_www
						fi

						if [ ! -z "${activate_le_proceed-}" ]
						then
							unset activate_le_proceed
						fi

					fi

					echo "${b}   Finished restore for | $this_site |.${x}"
					echo

				fi

			else

				echo "${b}*] Site | ${r}$this_site${x}${b} | is on the exclusion list.${x}"
				echo
				echo "${b}   Skipping...${x}"
				echo

			fi

		fi

	done

}

################################################################################

choose_mastodon_install_type() {

	describe_setting() {

		dna-echo -m "Now specify how Mastodon was installed on this machine:"

	}

	validate_input() {

		case $input in

			standard)	valid=y
						;;
			docker)		valid=y
						;;
			*)			dna-echo -e "Invalid setting for | ${n-}s3_monthly_uploads${r-} | in function | ${n-}${FUNCNAME[0]}${r-} |."
						valid=n
						;;

		esac

	}

	dna-set_option -o "mastodon_install_type" -p "mastodon" -d "y" -c "[standard/docker]" -v "y"

}

choose_mastodon_install_dir() {

	describe_setting() {

		dna-echo -m "Now specify the absolute path to the directory where Mastodon was installed on this machine:"
		dna-echo -m "For example: | ${y-}/home/mastodon/live${n-} |."

	}

	validate_input() {

		if [ -d "${input}" ]
		then
			valid=y
		else
			valid=n
		fi

	}

	dna-set_option -o "mastodon_install_dir" -p "mastodon" -d "y" -v "y"

}

################################################################################
################################################################################
################################################################################

perform_installation() {

	############################################################################
	################### Add your install-time functions here ###################
	############################################################################

	os-install_duplicity
	os-install_mail_notifications

	############################################################################

	dna-echo -m "Now installing scripts in | $install_dir/ | ..."

	rsync -aAXx $source_dir/ $install_dir/ --include=tools*** --include=functions --exclude="*"

	dna-echo -s "Finished installing scripts."

	############################################################################

	os-set_admin_email

	os-setup_backup_restore

	############################################################################

	choose_mastodon_install_type

	choose_mastodon_install_dir

	############################################################################

	os-add_cron_job -n "${short_name}-backup" -t "8 4 * * * " -c "bash /root/openspace42/${short_name}/tools/${short_name}-backup"

	############################################################################
	############################################################################
	############################################################################

}

################################################################################
