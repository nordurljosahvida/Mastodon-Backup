#!/usr/bin/env bash

### openspace synthia bootstrap framework v0.2.1 [https://github.com/openspace42/synthia]

os_dna_version=0.2.6

################################################################################

define_vars() {

	############################################################################
	######################## Insert your variables here ########################
	############################################################################

	proj_name="incognitum"
	short_name="incognitum"
	author_name="openspace42"
	git_host="https://github.com/"

	### Set this to `y` if your project stores no data on end users' machines that could go lost during a re-install or update
	skip_install_time_backup=y

	### Set this to the directory that has the most impactful size when performing a backup [such as `/var/www/` for nginx-related projects]
	backup_ref_dir="/home/mastodon/live/public"

	############################################################################
	############################################################################
	############################################################################

	os-define_vars

}

################################################################################

check_root() {

	if [[ $EUID -ne 0 ]]
	then
		echo "This script must be run as root."
		echo
		echo "Exiting..."
		echo
		exit 1
	fi

}

download_os_dna() {

	clone_host="https://github.com"
	clone_author="openspace42"
	clone_name="dna"

	clone_base_dir=/root/$clone_author
	clone_dir=$clone_base_dir/$clone_name

	mkdir -p $clone_base_dir

	if [ -d $clone_dir ]
	then
		rm -r ${clone_dir:?}
	fi

	( cd "$clone_base_dir" && git clone "$clone_host/$clone_author/$clone_name" && cd "$clone_name" && \
		if [ ! "${custom_dna_version-null}" = "b" ]; \
		then \
			git checkout "tags/v$os_dna_version" && \
			echo "$os_dna_version" > "./version_installed"; \
		else \
			clone_latest_commit="$(git log -n 1 --pretty=format:"%H"  | cut -c1-7)" && \
			echo "bleeding-edge-$clone_latest_commit" > "./version_installed"; \
		fi &> /dev/null \
	)

}

source_os_dna() {

	for f in /root/openspace42/dna/functions/*
	do
		. $f
	done

}

################################################################################

################################################################################
######################## Insert project functions here #########################
################################################################################

backup_locally_loop() {

	## Backup important data from a Mastodon instance
	## Copyright (C) 2017 Gergely Nagy
	##
	## Released under the WTFPL, see LICENSE.

	if [ "${deployment_type}" = "docker" ]
	then

		cd /home/mastodon/live/

		BACKUPDIR="${BACKUPDIR:-$(pwd)/backup}"
		MASTODON_DIR="${MASTODON_DIR:-./public}"
		DESTDIR="${BACKUPDIR}"
		install -d "${DESTDIR}"

		list_local_media() {
		    LMTMP=$(tempfile)
		    docker exec -t live_db_1 psql -U postgres -q -P pager=off -c \
		           'select ma.id, ma.file_file_name from media_attachments ma, accounts a where a.id = ma.account_id and a.domain is NULL;' \
		        | head -n -2 | tail -n +3 > ${LMTMP}

		    IFS="
		"
		    for line in $(cat ${LMTMP}); do
		        id=$(echo $line | cut -d "|" -f 1 | tr -d " ")
		        fn=$(echo $line | cut -d "|" -f 2 | tr -d " " | sed -e "s,\r,,")
		        url="system/media_attachments/files/$(printf "%09d" $id | sed -e 's,\(...\),\1/,g')original/$fn"
		        echo $url
		    done
		    rm -f "${LMTMP}"
		}

		echo "* Copying configuration..."
		cp ${MASTODON_DIR}/../.env.production ${MASTODON_DIR}/../docker-compose.yml ${DESTDIR}/

		echo "* Archiving local media..."
		cd "${MASTODON_DIR}"
		tar -cv --ignore-failed-read -f "${DESTDIR}/local-media.tar" $(list_local_media) 2>/dev/null

		echo "* Dumping the database..."
		docker exec -t live_db_1 pg_dumpall -c -U postgres | xz >"${DESTDIR}/db.sql.xz"

	else

		echo

	fi





	cp -r "$conf_dir" "$tmp_backup_dir"/conf/

	### Add hardcoded sites to exclude to the user-specified ones

	backup_exclude_sites="22222, html, roundcubemail, $backup_exclude_sites"

	for site in $www_dir/*
	do
		if [ -d "$site" ]
		then
			this_site="$(echo "$site" | sed "s|${www_dir}/||")"
			if [ "${backup_exclude_sites/$this_site}" = "$backup_exclude_sites" ]
			then
				echo "${b}*] Now evaluating site | ${g}$this_site${x}${b} |: ${x}"
				echo
				this_site_dir="$tmp_backup_dir/data/$this_site"
				mkdir -p $this_site_dir
				wpconfigfile="$site/wp-config.php"
				if [ -f $wpconfigfile ]
				then
					echo "${b}   Proceeding with ${l}wordpress${x}${b} site backup...${x}"
					echo
					WPDBNAME=`cat $wpconfigfile | grep DB_NAME | cut -d \' -f 4`
					WPDBUSER=`cat $wpconfigfile | grep DB_USER | cut -d \' -f 4`
					WPDBPASS=`cat $wpconfigfile | grep DB_PASSWORD | cut -d \' -f 4`
					/usr/bin/mysqldump -u $WPDBUSER -p$WPDBPASS $WPDBNAME > $this_site_dir/mysqldump.sql
					cp $wpconfigfile $this_site_dir/wp-config.php
				else
					echo "${b}   Proceeding with ${m}NON wordpress${x}${b} site backup...${x}"
					echo
				fi

				rsync -aAXx --exclude backup --exclude conf --exclude logs "$site"/ "$this_site_dir"

				echo "${b}   Finished backup for | $this_site |.${x}"
				echo
			else
				echo "${b}*] Site | ${r}$this_site${x}${b} | is on the exclusion list.${x}"
				echo
				echo "${b}   Skipping...${x}"
				echo
			fi
		fi
	done

}

restore_loop() {

	rsync -aAXx --delete $restore_file_path/conf/ $conf_dir/

	### Perform raptor specific restore on this running machine

	echo "${b}Now restoring your old EasyEngine installation from backup...${x}"
	echo

	### Add hardcoded sites to exclude to the user-specified ones

	restore_exclude_sites="22222, html, roundcubemail, ${exclude_sites-null}"

	for site in $restore_file_path/data/*
	do

		if [ -d "$site" ]
		then

			this_site="$(echo "$site" | sed "s|${restore_file_path}/data/||")"

			if [ "${restore_exclude_sites/$this_site}" = "$restore_exclude_sites" ]
			then

				echo "${b}*] Now evaluating site | ${g}$this_site${x}${b} |: ${x}"
				echo
				www_site_dir="$www_dir/$this_site"

				proceed=y

				if [ -d $www_site_dir ]
				then

					echo "${r}${b}   This site already exists on this machine.${x}"
					echo

					if [ "${delete_existing:-null}" = "y" ]
					then
						echo "${b}   Deleting site and re-creating it restoring its respective backup...${x}"
						echo
						ee site delete $this_site --no-prompt
					else

						read -rp "${b}   Delete it and re-create it restoring its respective backup? (Y/n): ${x}" -n 1
						echo
						if [[ ! $REPLY =~ ^[Nn]$ ]]
						then
							echo "${b}   Ok, proceeding...${x}"
							echo
							ee site delete $this_site --no-prompt
						else
							echo
							echo "${b}   Ok, skipping...${x}"
							echo
							proceed=n
						fi

					fi
				fi

				if [ $proceed = y ]
				then

					ee site create $this_site
					echo

					### Test to see if site to be restored is a wordpress site and if it is restore it while replacing new database details

					real_wp_config_file="$site/wp-config.php"
					if [ -f $real_wp_config_file ]
					then

						echo "${b}   Proceeding with ${l}wordpress${x}${b} site restore...${x}"
						echo

						ee site update $this_site --wpfc
						echo

						www_wp_config_file="$www_site_dir/wp-config.php"

						www_WPDBNAME=`cat $www_wp_config_file | grep DB_NAME | cut -d \' -f 4`
						www_WPDBUSER=`cat $www_wp_config_file | grep DB_USER | cut -d \' -f 4`
						www_WPDBPASS=`cat $www_wp_config_file | grep DB_PASSWORD | cut -d \' -f 4`

						old_WPDBNAME=`cat $real_wp_config_file | grep DB_NAME | cut -d \' -f 4`
						old_WPDBUSER=`cat $real_wp_config_file | grep DB_USER | cut -d \' -f 4`
						old_WPDBPASS=`cat $real_wp_config_file | grep DB_PASSWORD | cut -d \' -f 4`

						rm "$www_wp_config_file"
						cp "$real_wp_config_file" "$www_wp_config_file"

						sed -i "s|${old_WPDBNAME}|${www_WPDBNAME}|g" "$www_wp_config_file"
						sed -i "s|${old_WPDBUSER}|${www_WPDBUSER}|g" "$www_wp_config_file"
						sed -i "s|${old_WPDBPASS}|${www_WPDBPASS}|g" "$www_wp_config_file"

						mysql -u"$www_WPDBUSER" -p"${www_WPDBPASS}" "${www_WPDBNAME}" < "$site/mysqldump.sql"

					else

						echo "${b}   Proceeding with ${m}NON wordpress${x}${b} site restore...${x}"
						echo

						if [ "${enable_php:-null}" = "y" ]
						then

							echo "${b}   Activating PHP on this site...${x}"
							echo
							ee site update $this_site --php
							echo

						elif [ "${enable_php:-null}" = "n" ]
						then
							echo "${b}   NOT activating PHP on this site...${x}"
							echo

						else

							read -rp "${b}   Activate PHP on restored site? (Y/n): ${x}" -n 1
							echo
							if [[ ! $REPLY =~ ^[Nn]$ ]]
							then
								echo "${b}   Ok, proceeding...${x}"
								echo
								ee site update $this_site --php
								echo
								echo
							else
								echo
								echo "${b}   Ok, skipping...${x}"
								echo
							fi

						fi

					fi

					rsync -aAXx --exclude wp-config.php --exclude mysqldump.sql "$site"/ "$www_site_dir"

					chown -R www-data:www-data "$www_site_dir"

					if [ "${enable_le:-null}" = "y" ]
					then
						echo "${b}   Provisioning LetsEncrypt TLS certificate for restored site...${x}"
						echo
						activate_le_proceed=y
					elif [ "${enable_le:-null}" = "o" ]
					then
						echo "${b}   Provisioning LetsEncrypt TLS certificate for restored site if DNS checks succeed...${x}"
						echo
						activate_le_proceed=o
					elif [ "${enable_le:-null}" = "n" ]
					then
						echo "${b}   NOT provisioning LetsEncrypt TLS certificate for restored site...${x}"
						echo
					else
						read -rp "${b}   Also provision LetsEncrypt TLS certificate for restored site? (Y/n): ${x}" -n 1
						echo
						if [[ ! $REPLY =~ ^[Nn]$ ]]
						then
							echo "${b}   Ok, proceeding...${x}"
							echo
							activate_le_proceed=y
						else
							echo
							echo "${b}   Ok, skipping...${x}"
							echo
						fi
					fi

					if [ "${activate_le_proceed:-null}" = "y" ] || [ "${activate_le_proceed:-null}" = "o" ]
					then

						hostname="$this_site"

						declare -a dnsarray=(
						"hostname"
						)

						# Skip IPv6 checks as EasyEngine doesn't yet support it [WTF!!!]

						declare -a iparray=(
						"v4"
						)

						declare -A digarray=(
						[HN]=""
						[www]="www."
						)

						dnschecktype=$hostname
						thisipv4="$(dig +short myip.opendns.com @resolver1.opendns.com)"

						for dnstype in "${dnsarray[@]}"
						do

							for ipversion in "${iparray[@]}"
							do

								echo "${b}   Now let's make sure your site's IP$ipversion DNS settings are correct.${x}"
								echo

								digarrayiter=0

								for i in "${!digarray[@]}"
								do

									digarrayiter=$((digarrayiter + 1))

									echo "${b}   $digarrayiter] Now checking the ${digarray[$i]}$dnschecktype DNS record in IP$ipversion...${x}"
									echo

									accept=n
									until [ $accept = "y" ]
									do

										if [ "$ipversion" = "v4" ]
										then
											thisip=$thisipv4
											digresult="$(getent ahostsv4 "${digarray[$i]}""$dnschecktype". | head -1 |sed 's/ .*//')"
											rectype="A"
										else
											thisip=$thisipv6
											digresult="$(getent ahostsv6 "${digarray[$i]}""$dnschecktype". | grep -v "$thisipv4" | head -1 | sed 's/ .*//')"
											rectype="AAAA"
										fi

										if [ -z "$digresult" ]
										then

											if [ ! "$dnstype" = "SRV" ]
											then
												echo "${r}${b}   The ${digarray[$i]}$dnschecktype IP$ipversion DNS record does NOT appear to be at all set.${x}"
												echo
											else
												echo "${r}${b}   The ${digarray[$i]}$dnschecktype SRV record does NOT appear to be at all set.${x}"
												echo
											fi

											echo "${b}   Please ensure you set your DNS record as follows:${x}"
											echo
											echo -e "   | ${digarray[$i]}$dnschecktype\\t\\t$rectype\\t$thisip |"
											echo
											if [ ! "${digarray[$i]}$dnschecktype" = "$hostname" ]
											then
												if [ $rectype = "A" ] || [ $rectype = "AAAA" ]
												then
													if [ "$ipversion" = "v4" ]
													then
														echo "${g}${b}   You can also set this record as a CNAME [suggested choice]:${x}"
														echo
														echo -e "   | ${digarray[$i]}$dnschecktype\\t\\tCNAME\\t$hostname |"
														echo
													fi
												fi
											fi
											result=notset
										else
											if [ "$digresult" = "$thisip" ]
											then

												if [ ! "$dnstype" = "SRV" ]
												then
													echo "${g}${b}   The ${digarray[$i]}$dnschecktype IP$ipversion DNS record appears to resolve correctly to this server.${x}"
													echo
												else
													echo "${g}${b}   The ${digarray[$i]}$dnschecktype SRV record appears to resolve correctly to this server.${x}"
													echo
												fi

												echo -e "   | ${digarray[$i]}$dnschecktype\\t\\t$rectype\\t$thisip |"
												echo
												result=ok
											else

												if [ ! "$dnstype" = "SRV" ]
												then
													echo "${r}${b}   The ${digarray[$i]}$dnschecktype IP$ipversion DNS record does NOT appear to correctly resolve to this server.${x}"
													echo
												else
													echo "${r}${b}   The ${digarray[$i]}$dnschecktype SRV record does NOT appear to correctly resolve to this server.${x}"
													echo
												fi

												echo "${b}   This is the result of a DNS query for ${digarray[$i]}$dnschecktype:${x}"
												echo
												echo "   $digresult"
												echo
												echo "${b}   Please set it instead to:${x}"
												echo
												echo -e "   | ${digarray[$i]}$dnschecktype\\t\\t$rectype\\t$thisip |"
												echo
												if [ ! "${digarray[$i]}$dnschecktype" = "$hostname" ]
												then
													if [ $rectype = "A" ] || [ $rectype = "AAAA" ]
													then
														if [ "$ipversion" = "v4" ]
														then
															echo "${g}${b}   You can also set this record as a CNAME [suggested choice]:${x}"
															echo
															echo -e "   | ${digarray[$i]}$dnschecktype\\t\\tCNAME\\t$hostname |"
															echo
														fi
													fi
												fi
												result=incorrect
											fi
										fi

										if [ ! $result = "ok" ]
										then

											if [ "${activate_le_proceed:-null}" = "y" ]
											then

												valid=n
												until [ $valid = "y" ]
												do
													read -n 1 -rp "${b}   Test again?${x} (${b}Y${x}[es]/${b}s${x}[kip]/${b}e${x}[xit]) " answer;
													case $answer in
														"")
														echo
														valid=y
														accept=n
														;;
														y)
														echo -e "\\n"
														valid=y
														accept=n
														;;
														s)
														echo -e "\\n"
														echo "${b}   Skipping DNS check for this record...${x}"
														echo
														valid=y
														accept=y
														;;
														e)
														echo -e "\\n"
														echo "${b}   Exiting...${x}"
														echo
														exit
														;;
														*)
														echo -e "\\n"
														echo "${b}   Invalid option. Retry...${x}"
														echo
														valid=n
														accept=n
														;;
													esac
												done

											else

												echo "${r}${b}   DNS test failed for this record. Continuing anyway...${x}"
												echo
												accept=y

											fi

										else

											accept=y

										fi

									done

									if [ $result = ok ]
									then

										if [ $i = "HN" ]
										then
											le_dns_check_HN=ok
										else
											le_dns_check_www=ok
										fi

									fi

								done

								echo "${b}   Finished checking your $dnstype IP$ipversion DNS settings.${x}"
								echo

							done

						done

						if [ "${le_dns_check_HN:-null}" = "ok" ] && [ "${le_dns_check_www:-null}" = "ok" ]
						then
							echo "${g}${b}   Activating LetsEncrypt for $this_site...${x}"
							echo
							ee site update $this_site --le --experimental || true
							echo
						else
							echo "${r}${b}   One or more DNS checks for $this_site failed and was skipped.${x}"
							echo
							echo "${b}   NOT activating LetsEncrypt for $this_site."
							echo
						fi

						if [ ! -z "${le_dns_check_HN-}" ]
						then
							unset le_dns_check_HN
						fi

						if [ ! -z "${le_dns_check_www-}" ]
						then
							unset le_dns_check_www
						fi

						if [ ! -z "${activate_le_proceed-}" ]
						then
							unset activate_le_proceed
						fi

					fi

					echo "${b}   Finished restore for | $this_site |.${x}"
					echo

				fi

			else

				echo "${b}*] Site | ${r}$this_site${x}${b} | is on the exclusion list.${x}"
				echo
				echo "${b}   Skipping...${x}"
				echo

			fi

		fi

	done

}

choose_local_user() {

	currusers="$(cat /etc/passwd | cut -d: -f 1,3,6 | grep "[1-9][0-9][0-9][0-9]" | grep "/home" | cut -d: -f1)"

	declare -a options=( $currusers )

	if [ -z "$currusers" ]
	then
		echo "${r}${b}No NON-system users found.${x}"
		echo
		echo "${b}Please run the | add-user | command first.${x}"
		echo
		os-exit_function
	fi


	accept=n
	until [ $accept = "y" ]
	do

		select sel_user in "${options[@]}"
		do
			echo
			IFS=' ' read name ip <<< $sel_user
			test -n "$sel_user" && break
			echo ">>> Invalid Selection"
		done

		echo "${b}User $sel_user selected.${x}"
		echo

		valid=n
		until [ $valid = "y" ]
		do
			read -n 1 -rp "${b}Is this the correct user?${x} (${b}Y${x}[es]/${b}n${x}[o]/${b}e${x}[xit]) " answer;
			case $answer in
				"")
				echo
				valid=y
				accept=y
				;;
				y)
				echo -e "\\n"
				valid=y
				accept=y
				;;
				n)
				echo -e "\\n"
				echo "${b}No problem, please select your desired user again now...${x}"
				echo
				valid=y
				accept=n
				;;
				e)
				echo -e "\\n"
				echo "${b}Exiting...${x}"
				echo
				exit
				;;
				*)
				echo -e "\\n"
				echo "${b}Invalid option. Retry...${x}"
				echo
				valid=n
				accept=n
				;;
			esac
		done

	done

}

choose_local_site() {

	if [ ! -d $www_dir ]
	then
		echo "${r}${b}Local backups directory [$www_dir] not found.${x}"
		echo
		os-exit_function
	fi

	if [ -z "$(ls -A $www_dir)" ]
	then
		echo "${r}${b}No sites found in | $www_dir |..${x}"
		echo
		os-exit_function
	fi

	choice="${b}Now choose the site you'd like to provide access to: ${x}"
	echo "$choice"
	echo

	accept=n
	until [ $accept = "y" ]
	do

		select sel_site in $www_dir/*
		do
			echo
			test -n "$sel_site" && break
			echo ">>> Invalid Selection"
		done

		echo "${b}Site $sel_site selected.${x}"
		echo

		valid=n
		until [ $valid = "y" ]
		do
			read -n 1 -rp "${b}Is this the correct site?${x} (${b}Y${x}[es]/${b}n${x}[o]/${b}e${x}[xit]) " answer;
			case $answer in
				"")
				echo
				valid=y
				accept=y
				;;
				y)
				echo -e "\\n"
				valid=y
				accept=y
				;;
				n)
				echo -e "\\n"
				echo "${b}No problem, please select your desired site again now...${x}"
				echo
				valid=y
				accept=n
				;;
				e)
				echo -e "\\n"
				echo "${b}Exiting...${x}"
				echo
				exit
				;;
				*)
				echo -e "\\n"
				echo "${b}Invalid option. Retry...${x}"
				echo
				valid=n
				accept=n
				;;
			esac
		done

	done

	sel_site_name=${sel_site#/var/www/}

}

################################################################################
################################################################################
################################################################################

perform_installation() {

	############################################################################
	################### Add your install-time functions here ###################
	############################################################################

	os-install_easyengine
	os-install_duplicity
	os-install_mail_notifications

	echo "${b}Now installing scripts in | $install_dir/ | ...${x}"
	echo

	rsync -aAXx $source_dir/ $install_dir/ --include=tools*** --include=functions --exclude="*"

	echo "${b}Finished installing scripts.${x}"
	echo

	os-set_admin_email

	os-setup_backup_restore

	describe_setting() {

	    echo "${b}Please specify any sites to exclude from your backups.${x}"
	    echo
	    echo "${b}Type in a comma separated list of websites to exclude.${x}"
	    echo
	    echo "${b}Example: | example.org, hello.world, site-to.exclude.tld |.${x}"
	    echo
	    echo "${b}Enter | null | to skip excluding any site.${x}"
	    echo

	}

	os-set_option -o backup_exclude_sites -v n -d y -p backups/local

	os-add_cron_job -n $short_name-backup -t "8 4 * * * " -c "bash /root/openspace42/$short_name/tools/$short_name-backup"

	sed -i "/Subsystem/c\Subsystem sftp internal-sftp" "$ssh_config_file"

	if ! grep -q "Match Group $sftp_group" "$ssh_config_file"
	then
	    cat <<EOT >> "$ssh_config_file"

Match Group $sftp_group
ChrootDirectory /home/%u
ForceCommand internal-sftp
PasswordAuthentication yes
PermitTunnel no
AllowAgentForwarding no
AllowTcpForwarding no
X11Forwarding no
EOT

	fi

	if ! grep -q $sftp_group /etc/group
	then
	    addgroup "$sftp_group"
	fi

	service ssh restart

	rsync -aAXx $source_dir/ $install_dir/ --include=add-site-to-user --include=add-user --include=functions --exclude="*"

	os-install_dependencies -p bindfs

	############################################################################
	############################################################################
	############################################################################

}

################################################################################
